import &StandardImport, &Lib

wrapCommandWithArgsProcessing = (command) ->
  (options, args) ->
    mergeInto options, processArgsIntoOptions args
    command options

{}
  version: -> &package.version

  ls: wrapCommandWithArgsProcessing (options, args) ->
    items = []
    options extract onItem, output, fromCli, verbose, raw, long as longForm
    output ?= (v) -> console.log v
    onItem ?=
      if fromCli
        (item) ->
          item extract LastModified, Size, Key
          output
            switch
            when raw  then JSON.stringify item
            when longForm then "" #{formatDate LastModified, "yyyy-mm-dd HH:MM:ss"} #{pad humanByteSize(Size), 10, ' ', true} #{Key}
            else Key
      else
        (item) -> items.push if raw then item else item.Key

    &S3Comprehensions.each merge
      quiet: true
      options
      mapList: (l) ->
        each item from-array l
          onItem item
        null
    .then (info) ->
      if fromCli then if verbose then info else null
      else if verbose then merge info, {} items else items

  listBuckets:  wrapCommandWithArgsProcessing -> new &lib/S3().listBuckets()
  summarize:    wrapCommandWithArgsProcessing &S3P.summarize
  compare:      wrapCommandWithArgsProcessing &S3P.compare
  cp:           wrapCommandWithArgsProcessing &S3P.copy
  sync:         wrapCommandWithArgsProcessing &S3P.sync
  each:         wrapCommandWithArgsProcessing &S3Comprehensions.each
  map:          wrapCommandWithArgsProcessing &S3Comprehensions.map
