import &path, &ArtStandardLib, &ArtClassSystem, &Lib, {} &colors

class S3Comprehensions

  @normalizeOptions: (options) =>
    options extract
      # aliases
      dryrun
      quiet
      toPrefix
      addPrefix
      prefix = ''
      pattern

      # normalized
      pretend = dryrun
      toKey
      map
      mapList
      returnValue
      filter
      startAfter = ''
      stopAt
      copyConcurrency       = 500
      largeCopyConcurrency  = 75
      maxQueueSize          = copyConcurrency * 100
      copyPwp               = new PromiseWorkerPool copyConcurrency
      largeCopyPwp          = new PromiseWorkerPool largeCopyConcurrency
      largeCopyThreshold    = 100 * 1024 ** 2

    withFn = options.with
    whenFn = options.when
    returningV = options.returning ? options.into

    return options unless dryrun or toPrefix or withFn or pattern or returningV or whenFn or prefix? or !startAfter? or !stopAt?

    try
      startAfter = "#{startAfter}"
      stopAt = "#{stopAt}" if stopAt
      prefix = "#{prefix}"
      if startAfter < prefix
        startAfter = prefix

      prefixStopAt = getLastKeyWithPrefix prefix ? ''
      if !stopAt || stopAt > prefixStopAt
        stopAt = prefixStopAt

      if whenFn or pattern
        throw new Error "only use one: when, filter or pattern" if  compactFlatten([whenFn, filter, pattern]).length > 1
        filter = whenFn ? ({Key}) -> Key.match pattern

      if withFn
        throw new Error "only use one: with, map or mapList" if compactFlatten([withFn, map, mapList]).length > 1
        map = withFn

      toKey ?=
        if toPrefix? or addPrefix?
          throw new Error "only use one: addPrefix, toPrefix, toKey" if compactFlatten([toPrefix, addPrefix, toKey]).length > 1
          if toPrefix?
            if prefix
              r = /// ^#{prefix}
              (key) -> key.replace r, toPrefix
            else
              (key) -> toPrefix + key
          else
            (key) -> addPrefix + key
        else (key) -> key

    catch e
      log.unquoted {} options
      throw e

    merge
      objectWithout options, :dryrun :toPrefix :withFn :pattern :into :returning :whenFn :prefix :addPrefix
      {}
        originalOptions: options.originalOptions ? options
        scratchState: {}
        quiet
        pretend
        toKey
        filter
        map
        mapList
        returnValue
        startAfter
        stopAt
        copyConcurrency
        largeCopyConcurrency
        maxQueueSize
        copyPwp
        largeCopyPwp
        largeCopyThreshold

  filterNone = -> true
  ##
    wrapper around each that returns a list of promise failures rather than failing
  @eachPromises: (options) =>
    options = @normalizeOptions options
    failed = undefined
    options extract map, filter = filterNone

    throw new Error "Expecting options.map" unless map is Function

    @each merge options,
      mapList: (items) ->
        Promise.all array item in-array items when filterNone item
          Promise.then -> map item
          .catch (error) ->
            log {} item.Key, error
            failed?=[]
            .push item.Key
    .then (result) ->
      if failed?
        merge result, {} failed
      else result

  @map: (options) =>
    map ?= options.map ? (a) -> a
    _reduce = options.reduce ? (a, b) ->
      compactFlatten [] a, b

    result = undefined

    @each merge
      objectWithout options, :map
      mapList: (items) ->
        Promise.all array item in-array items
          Promise.then -> map item
          .then (m) ->
            result = if result == undefined
              m
            else
              _reduce result, m

    .catch (error) -> error.found || throw error
    .then ->
      if result == undefined
        options.default
      else if options.finally
        options.finally result
      else result

  ##
    IN
      @each options
      required: toBucket
      logToCopy: false
      logToDelete: false

  ##
    return first item found
    IN: each options plus
  @find: (options) =>
    options = @normalizeOptions options
    withFn  = options.map ? (a) -> a
    @each merge options, map: (item) -> throw found: withFn item
    .catch (error) -> error.found || throw error

  ## return array of items found
  @array: (options) =>
    options = @normalizeOptions options
    withFn = options.with ? options.map ? (a) -> a
    apply = (item) -> withFn item, item.Key
    store = (v) -> intoArray.push v
    @each merge
      options
      into: intoArray = options.into ? []
      with: (item) ->
        Promise.resolve withFn item, item.Key
        .then store

  ## return an object mapping item.Keys to items found
  @object: (options) =>
    options = @normalizeOptions options
    withFn  = options.map ? (a) -> a
    withKey = options.withKey ? ({Key}) -> Key
    store = ([k, v]) -> intoObject[k] = v
    @each merge
      options
      into:     intoObject = options.into ? {}
      with: (item) ->
        Promise.all []
          withKey item, item.Key
          withFn item, item.Key
        .then store

  ##
    IN:
      options:
        aggressive:   false - if true, will make a little more S3 requests to increase parallelism
        debug:        false
        quiet:        log nothing
        showProgress: true - log progress once a second
        verboseProgress: false
        prefix:       <String/NULL> only scan within a given prefix
        startAfter:   <String/NULL> Keys starting with and including this key will be passed to map/mapList - overrides prefix
        stopAt:       <String/NULL> Keys up to but not including this one will be passed to map/mapList - overrides prefix
        limit:        <Number/1000> limit items per call; generally the default of 1000 is best (max allowed by AWS is 1000)
        bucket:
        toBucket:     <String> bucket name to compare with - if present, will run the same s3:list operations on the target bucket and pass matching lists to mapList as the second argument (map not supported)
        getProgress: <(duration) -> <String>> optional - if provided and showProgress is true, will append to the progress string
        maxListRequests: <Number> limit how many requests will be used - aborts nicely if reached
          nicely: finishes current function calls, logs message, does no more work, throws error

        pattern: only yield items who's keys match this pattern (creates a 'when' clause)

        throttle: -> T/F - (optional)
          If present, it gets called before any new s3.list calls are made.
          If it returns true, no new s3.list calls will be made.
          While it returns true, it will be called once/second/parallel-branch until it returns false.

        COMPREHENSION
        with: (Item) -> ignored - alais of `map`
        when: (Item) -> T/F - if true, pass it on to `map`, else skip
        returning:    if present, return this value instead of stats
        into:         <ALIAS: returning>
    OUT:
      options.returning ? {}
        itemsFound
        itemsProcessed
        requestsUsed
        matchingItems: if when is provided, this counts the number of times when is true
        ... and more stats
  @each: (options) =>
    options = @normalizeOptions options
    options extract
      quiet
      showProgress = !quiet
      debug
      fetchOwner

      # source options
      bucket
      startAfter
      stopAt
      filter

      # compare-to options
      compare
      toBucket
      toKey

      # limits
      limit = 1000
      maxListRequests
      listConcurrency = 100 # max open reqeusts

      # actions
      returnValue
      map
      mapList

      aggressive

      getProgress
      verboseProgress
      throttle
      stats

      # s3 options
      region
      useAccelerateEndpoint

      # internal use only
      s3
      pwp = new PromiseWorkerPool listConcurrency # internal use only

    s3 ?= new &Lib/S3 {} region, useAccelerateEndpoint: !!useAccelerateEndpoint

    if compare && map && toBucket
      throw new Error "cannot use both `compare` and `map` - use mapList instead"

    _reduce = options.reduce

    # statistics
    itemsFound =
    requestsUsed =
    maxOutstanding =
    outstanding = 0
    startTime = currentSecond()
    matchingItems = if filter then 0 else undefined # if when is provided, this counts the number of times when is true

    # pwp = queue: (f) -> f()

    if showProgress
      report = (message) ->
        duration = currentSecond() - startTime
        itemsPerSecond = (itemsFound / duration)
        efficiency = (itemsFound / (requestsUsed * limit)) * 100 | 0

        log "s3p: " +
          compactFlatten []
            "" d: #{durationString duration, 2}
            "" items: #{itemsFound}
            "" items/s: #{itemsPerSecond | 0}
            "" listRequests: #{requestsUsed}
            if verboseProgress              then "" efficiency: #{efficiency}%
            if verboseProgress              then "" outstanding: #{outstanding}
            if matchingItems                then "" matches: #{matchingItems}
            if throttled > 0                then "" listWorkers: throttled
            else if pwp.activeWorkers > 0   then "" listWorkers: #{pwp.activeWorkers}
            if pwp.queueSize > 0            then "" listQueue: #{pwp.queueSize}
            getProgress?(duration) || null
            message
          .join ', '

      progressReporter = interval 1000, report

    ## applyF
      Apply the custom map or mapList functions
      IN:
        items:        list of S3 items in the source bucket as returned by the AwsSdk s3 list call
        compareItems: (optional, if compare is set), list of items in the toBucket
        compareStartAfter
        compareStopAt

      items, and compareItems (if present) are guaranteed to be complete lists for the given range:
        The Range will be:
          from: > compareStartAfter
          to:   <= compareStopAt

      OUT: count of times map was applied
    applyF = (items, compareItems, compareStartAfter, compareStopAt) ->
      itemsFound += items.length
      Promise.then ->
        switch
        when mapList
          if filter
            filteredItems = array item in-array items when filter item
            matchingItems += filteredItems.length

            mapList
              filteredItems
              array item in-array compareItems when filter item
              compareStartAfter
              compareStopAt

          else
            mapList
              items
              compareItems
              compareStartAfter
              compareStopAt

        when map && filter  then each item in-array items with matchingItems++; map item when filter item
        when map            then each item in-array items with map item
      .then -> items.length

    throttled = 0
    waitForThrottle = ->
      Promise.then ->
        if throttle?()
          throttled++
          timeout 1000
          .then ->
            throttled--
            waitForThrottle()

    ## eachRecursive
      OUT: number of items iterated over (in the source bucket)
    eachRecursive = (startAfter, stopAt, usePrefixBisect = false, debugContext) =>
      return Promise.resolve(0) if requestsUsed >= maxListRequests || startAfter >= stopAt

      middleKey = getBisectKey startAfter, stopAt, usePrefixBisect

      report() if showProgress == :verbose
      debug && log "" debug: START:  #{pad debugContext ? :root, 10} startAfter: #{debugKey startAfter}  middleKey: #{debugKey middleKey}  stopAt: #{debugKey stopAt}  usePrefixBisect: #{usePrefixBisect}

      rawLeftCount = rawRightCount = null
      applyPromise = null

      waitForThrottle()

      ###################################################
        LIST (source) bucket
      ###################################################
      .then ->
        requestsUsed += 2
        maxOutstanding = Math.max maxOutstanding, outstanding += 2

        Promise.all []
          pwp.queue -> s3.list {} bucket, limit, fetchOwner, startAfter
          pwp.queue -> s3.list {} bucket, limit, fetchOwner, startAfter: middleKey

        .then ([rawLeftItems, rawRightItems]) ->
          rawLeftCount  = rawLeftItems?.length
          rawRightCount = rawRightItems?.length
          []
            array item in-array rawLeftItems  when item.Key <= middleKey
            array item in-array rawRightItems when item.Key <= stopAt

      .finally -> outstanding -= 2

      ###################################################
        LIST toBucket (optional -- only if 'compare' is true)
      ###################################################
      .then ([leftItems, rightItems]) ->
        Promise.all []
          leftItems
          rightItems

          compare && toBucket && @_compareList leftCompareOptions = {}
            limit, pwp
            startAfter: toKey startAfter
            bucket: toBucket
            stopAt: toKey if leftItems.length == limit then peek(leftItems).Key else middleKey

          compare && toBucket && @_compareList rightCompareOptions = {}
            limit, pwp
            bucket: toBucket
            startAfter: toKey middleKey
            stopAt: toKey if rightItems.length == limit then peek(rightItems).Key else stopAt

          leftCompareOptions
          rightCompareOptions

      ###################################################
        APPLY map/mapList
      ###################################################
        NOTE: we to something weird here - we set applyPromise, but we don't return it.
        This accomplishes two things:
          1. it allows us to apply the custom mapping code in parallel with subsequent, recursive LISTings
          2. it allows us to free up memory (leftItems / rightItems) as soon as the custom map code is done
      .then ([leftItems, rightItems, compareLeftItems, compareRightItems, leftCompareOptions, rightCompareOptions]) ->

        applyPromise = Promise.all []
          applyF leftItems,   compareLeftItems,   leftCompareOptions?.startAfter, leftCompareOptions?.stopAt
          applyF rightItems,  compareRightItems,  rightCompareOptions?.startAfter, leftCompareOptions?.stopAt

        []
          leftItems.length
          rightItems.length
          peek(leftItems)?.Key
          peek(rightItems)?.Key

      ###################################################
        RECURSE & wait for APPLY to complete
      ###################################################
      .then ([leftCount, rightCount, lastLeftKey, lastRightKey]) ->
        recurseLeft     = leftCount >= limit
        recurseRight    = rightCount >= limit

        leftStartAfter  = lastLeftKey
        leftStopAt      = middleKey
        rightStartAfter = lastRightKey
        rightStopAt     = stopAt

        leftUsePrefixBisect = rightCount == 0

        ## OPTIMIZATION: The code will work without this, but this lets us skip one recursion step. It may speed things up, but it appears to actually use more calls.
          SBD 4/27: I haven't need this over 10s of millions of S3 items iterated over. It still might be a good idea... but we may not actually need it.
          Basically, if (leftCount == 0 && recurseRight) is true, then the, when we recurse, we'll always be doing a use-prefix-bisect.
          We can skip directly to that here, one recursion step sooner.
          However, this also results in a second right-tail call that can OTHERWISE sometimes be skipped.
          It's a tradeoff.
        if aggressive && leftCount == 0 && recurseRight
          recurseLeft = true
          leftUsePrefixBisect = true
          leftStartAfter = lastRightKey
          leftStopAt = newMiddleKey = getBisectKey lastRightKey, rightStopAt
          rightStartAfter = newMiddleKey

        recurse = if recurseLeft then if recurseRight then :both else :left else :right
        if debug == :verbose
          log
            """
              -------------------------------------------------------------
              debug:
                INPUTS:
                  startAfter:       #{debugKey startAfter}
                  middleKey:        #{debugKey middleKey}
                  stopAt:           #{debugKey stopAt}
                  usePrefixBisect:  #{usePrefixBisect}
                RESULTS: (before recursion)
                  overlap:          #{if lastLeftKey < middleKey then :no else if lastLeftKey == lastRightKey then :full else :partial}
                  lastLeftKey:      #{debugKey lastLeftKey}
                  lastRightKey:     #{debugKey lastRightKey}
                  counts:           applied: [#{leftCount}, #{rightCount}] raw: [#{rawLeftCount}, #{rawRightCount}]
                PLAN:
                  recurse:              #{recurse}
                  leftStartAfter:       #{recurseLeft && debugKey leftStartAfter}
                  leftStopAt:           #{recurseLeft && debugKey leftStopAt}
                  leftUsePrefixBisect:  #{recurseLeft && leftUsePrefixBisect}
                  rightStartAfter:      #{recurseRight && debugKey rightStartAfter}
                  rightStopAt:          #{recurseRight && debugKey rightStopAt}

        Promise.all []
          applyPromise
          .finally -> applyPromise = null # make sure we release it when it's done

          if recurseLeft
            eachRecursive leftStartAfter,   leftStopAt,   leftUsePrefixBisect,  if recurseRight then :recurse-BL else :recurse-L
            .then (c) -> c + leftCount
          else leftCount

          if recurseRight
            eachRecursive rightStartAfter,  rightStopAt,  false,                if recurseLeft then :recurse-BR else :recurse-R
            .then (c) -> c + rightCount
          else rightCount

        .then ([leftCount, rightCount]) -> leftCount + rightCount

      .tapCatch (error) -> log.error eachRecursive: {} startAfter, stopAt, usePrefixBisect, error if error is Error

    eachRecursive
      startAfter
      stopAt

    .finally -> progressReporter?.stop()
    .then (count) ->
      report? :DONE unless quiet
      duration                = currentSecond() - startTime
      itemsPerSecond          = itemsFound / duration
      itemsPerSecond          = itemsPerSecond | 0 if itemsPerSecond > 10
      requestsPerSecond       = verboseProgress && requestsUsed / duration
      requestsPerSecond       = requestsPerSecond | 0 if requestsPerSecond > 10
      averageItemsPerRequest  = verboseProgress && itemsFound / requestsUsed
      averageItemsPerRequest  = averageItemsPerRequest | 0 if averageItemsPerRequest > 10
      info = merge {}
        duration
        matchingItems
        items:              itemsFound
        itemsPerSecond
        requests:           requestsUsed
        requestsPerSecond
        maxOutstanding:     verboseProgress && maxOutstanding
        averageItemsPerRequest

      if requestsUsed > maxListRequests
        e = Error "S3Comprehensions.each maxListRequestsReached:\n" + formattedInspect info
        e.info = info
        throw e

      else
        if returnValue? && showProgress
          log.unquoted finalStats: info

        returnValue
        ? merge
          dryrun: options.pretend
          stats
          info

  @_compareList: (options) =>
    @each merge options,
      returnValue: list = []
      mapList: (l) -> array from-array l into list
      quiet: true
